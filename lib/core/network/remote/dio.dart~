import 'package:todo/core/util/app_import.dart';

class DioHelper {
  static late Dio dio;

  static init() {
    dio = Dio(
      BaseOptions(
        baseUrl: ApiConstance.baseUrl,
        receiveDataWhenStatusError: true,
      ),
    );

    dio.interceptors.add(PrettyDioLogger(
      responseBody: true,
      error: true,
      requestHeader: true,
      responseHeader: false,
      requestBody: true,
      request: true,
      maxWidth: 90,
    ));

    // إضافة Interceptor للتحقق من صلاحية التوكن
    dio.interceptors.add(InterceptorsWrapper(
      onRequest: (options, handler) {
        String? token = AppConstance.token;
        if (token != null) {
          options.headers["Authorization"] = "Bearer $token";
        }
        return handler.next(options);
      },
      onError: (DioError error, ErrorInterceptorHandler handler) async {
        if (error.response?.statusCode == 401) {
          try {
            // تحديث التوكن باستخدام الـ Refresh Token
            await _refreshToken();

            // إعادة محاولة الطلب الأصلي بعد تحديث التوكن
            RequestOptions requestOptions = error.requestOptions;
            final response = await dio.request(
              requestOptions.path,
              options: Options(
                method: requestOptions.method,
                headers: requestOptions.headers,
              ),
              data: requestOptions.data,
              queryParameters: requestOptions.queryParameters,
            );
            return handler.resolve(response);
          } catch (e) {
            // فشل التحديث، قم بإرجاع الخطأ الأصلي
            return handler.next(error);
          }
        } else if (error.response?.statusCode == 403) {
          // تسجيل خروج المستخدم إذا فشل تحديث التوكن
          // AuthCubit().logout();
          return handler.next(error);
        } else {
          return handler.next(error); // أي خطأ آخر
        }
      },
    ));
  }

  // دالة لتحديث الـ JWT باستخدام الـ Refresh Token
  static Future<void> _refreshToken() async {
    // // استرجاع Refresh Token من التخزين (مثلاً من AuthCubit)
    // String? refreshToken = await AuthCubit().state.refreshToken;
    //
    // if (refreshToken != null) {
    //   final response = await dio.post('/auth/refresh-token', data: {
    //     'refresh_token': refreshToken,
    //   });
    //
    //   if (response.statusCode == 200) {
    //     // تحديث التوكنات في AuthCubit
    //     AuthCubit().updateTokens(
    //       response.data['access_token'],
    //       response.data['refresh_token'],
    //     );
    //   } else {
    //     throw Exception('Failed to refresh token');
    //   }
    // } else {
    //   throw Exception('No refresh token available');
    // }
  }


  static Future<Response> getData({
    required String url,
    Map<String, dynamic>? query,
    token,
  }) async {
    dio.options.headers["Authorization"] = "Bearer $token";
    dio.options.headers["Accept"] = "application/json";
    return await dio.get(
      url,
      queryParameters: query,
    );
  }

  static Future<Response> postData({
    required String url,
    Map<String, dynamic>? query,
    dynamic data,
    bool wantBearer = true,
    token,
  }) async {
    dio.options.headers["Authorization"] =
    wantBearer == true ? "Bearer $token" : "Basic $token";
    dio.options.headers["Accept"] = "application/json";
    dio.options.headers["Content-Type"] = wantBearer == true
        ? "application/json"
        : "application/x-www-form-urlencoded";
    return await dio.post(
      url,
      queryParameters: query,
      data: data,
    );
  }

  static Future<Response> putData({
    required String url,
    Map<String, dynamic>? query,
    dynamic data,
    token,
  }) async {
    dio.options.headers["Authorization"] = "Bearer $token";
    dio.options.headers["Accept"] = "application/json";
    return await dio.put(
      url,
      queryParameters: query,
      data: data,
    );
  }

  static Future<Response> deleteData({
    required String url,
    Map<String, dynamic>? query,
    dynamic data,
    token,
  }) async {
    dio.options.headers["Authorization"] = "Bearer $token";
    dio.options.headers["Accept"] = "application/json";
    return await dio.delete(
      url,
      queryParameters: query,
      data: data,
    );
  }
}
